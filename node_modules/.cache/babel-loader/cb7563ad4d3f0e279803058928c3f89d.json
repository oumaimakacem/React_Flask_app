{"ast":null,"code":"'use strict';\n\nconst matchAll = require('match-all'); // Tailwind started using CSS variables for color opacity since v1.4.0,\n// this helper adds a primitive support for these\n\n\nconst useVariables = object => {\n  const newObject = {};\n\n  for (const [key, value] of Object.entries(object)) {\n    if (!key.startsWith('--')) {\n      if (typeof value === 'string') {\n        newObject[key] = value.replace(/var\\(([a-zA-Z-]+)\\)/, (_, name) => {\n          return object[name];\n        });\n      } else {\n        newObject[key] = value;\n      }\n    }\n  }\n\n  return newObject;\n}; // Font variant numeric utilities need a special treatment, because\n// there can be many font variant classes and they need to be transformed to an array\n\n\nconst FONT_VARIANT_REGEX = /(oldstyle-nums|lining-nums|tabular-nums|proportional-nums)/g;\n\nconst addFontVariant = (style, classNames) => {\n  const matches = matchAll(classNames, FONT_VARIANT_REGEX).toArray();\n\n  if (matches.length > 0) {\n    style.fontVariant = matches;\n  }\n}; // Letter spacing also needs a special treatment, because its value is set\n// in em unit, that's why it requires a font size to be set too\n\n\nconst FONT_SIZE_REGEX = /text-(xs|sm|base|lg|xl|2xl|3xl|4xl|5xl|6xl)/;\nconst LETTER_SPACING_REGEX = /(tracking-[a-z]+)/;\n\nconst addLetterSpacing = (tailwindStyles, style, classNames) => {\n  const letterSpacingMatches = LETTER_SPACING_REGEX.exec(classNames);\n\n  if (!letterSpacingMatches) {\n    return;\n  }\n\n  const fontSizeMatches = FONT_SIZE_REGEX.exec(classNames);\n\n  if (!fontSizeMatches) {\n    throw new Error(\"Font size is required when applying letter spacing, e.g. 'text-lg tracking-tighter'\" // eslint-disable-line quotes\n    );\n  }\n\n  const letterSpacingClass = letterSpacingMatches[0];\n  const {\n    letterSpacing\n  } = tailwindStyles[letterSpacingClass];\n  const fontSizeClass = fontSizeMatches[0];\n  const {\n    fontSize\n  } = tailwindStyles[fontSizeClass];\n  style.letterSpacing = Number.parseFloat(letterSpacing) * fontSize;\n};\n\nconst create = tailwindStyles => {\n  // Pass a list of class names separated by a space, for example:\n  // \"bg-green-100 text-green-800 font-semibold\")\n  // and receive a styles object for use in React Native views\n  const tailwind = classNames => {\n    const style = {};\n\n    if (!classNames) {\n      return style;\n    }\n\n    addFontVariant(style, classNames);\n    addLetterSpacing(tailwindStyles, style, classNames);\n    const separateClassNames = classNames.replace(/\\s+/g, ' ').trim().split(' ').filter(className => !className.startsWith('tracking-'));\n\n    for (const className of separateClassNames) {\n      if (tailwindStyles[className]) {\n        Object.assign(style, tailwindStyles[className]);\n      } else {\n        console.warn(`Unsupported Tailwind class: \"${className}\"`);\n      }\n    }\n\n    return useVariables(style);\n  }; // Pass the name of a color (e.g. \"blue-500\") and receive a color value (e.g. \"#4399e1\"),\n  // or a color and opacity (e.g. \"black opacity-50\") and get a color with opacity (e.g. \"rgba(0,0,0,0.5)\")\n\n\n  const getColor = name => {\n    const style = tailwind(name.split(' ').map(className => `bg-${className}`).join(' '));\n    return style.backgroundColor;\n  };\n\n  return {\n    tailwind,\n    getColor\n  };\n};\n\nconst {\n  tailwind,\n  getColor\n} = create(require('./styles.json'));\nmodule.exports = tailwind;\nmodule.exports.default = tailwind;\nmodule.exports.getColor = getColor;\nmodule.exports.create = create;","map":{"version":3,"sources":["/home/jihed/Bureau/my-app1/node_modules/tailwind-rn/index.js"],"names":["matchAll","require","useVariables","object","newObject","key","value","Object","entries","startsWith","replace","_","name","FONT_VARIANT_REGEX","addFontVariant","style","classNames","matches","toArray","length","fontVariant","FONT_SIZE_REGEX","LETTER_SPACING_REGEX","addLetterSpacing","tailwindStyles","letterSpacingMatches","exec","fontSizeMatches","Error","letterSpacingClass","letterSpacing","fontSizeClass","fontSize","Number","parseFloat","create","tailwind","separateClassNames","trim","split","filter","className","assign","console","warn","getColor","map","join","backgroundColor","module","exports","default"],"mappings":"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","sourcesContent":["'use strict';\nconst matchAll = require('match-all');\n\n// Tailwind started using CSS variables for color opacity since v1.4.0,\n// this helper adds a primitive support for these\nconst useVariables = object => {\n\tconst newObject = {};\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tif (!key.startsWith('--')) {\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tnewObject[key] = value.replace(/var\\(([a-zA-Z-]+)\\)/, (_, name) => {\n\t\t\t\t\treturn object[name];\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tnewObject[key] = value;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn newObject;\n};\n\n// Font variant numeric utilities need a special treatment, because\n// there can be many font variant classes and they need to be transformed to an array\nconst FONT_VARIANT_REGEX = /(oldstyle-nums|lining-nums|tabular-nums|proportional-nums)/g;\n\nconst addFontVariant = (style, classNames) => {\n\tconst matches = matchAll(classNames, FONT_VARIANT_REGEX).toArray();\n\n\tif (matches.length > 0) {\n\t\tstyle.fontVariant = matches;\n\t}\n};\n\n// Letter spacing also needs a special treatment, because its value is set\n// in em unit, that's why it requires a font size to be set too\nconst FONT_SIZE_REGEX = /text-(xs|sm|base|lg|xl|2xl|3xl|4xl|5xl|6xl)/;\nconst LETTER_SPACING_REGEX = /(tracking-[a-z]+)/;\n\nconst addLetterSpacing = (tailwindStyles, style, classNames) => {\n\tconst letterSpacingMatches = LETTER_SPACING_REGEX.exec(classNames);\n\n\tif (!letterSpacingMatches) {\n\t\treturn;\n\t}\n\n\tconst fontSizeMatches = FONT_SIZE_REGEX.exec(classNames);\n\n\tif (!fontSizeMatches) {\n\t\tthrow new Error(\n\t\t\t\"Font size is required when applying letter spacing, e.g. 'text-lg tracking-tighter'\" // eslint-disable-line quotes\n\t\t);\n\t}\n\n\tconst letterSpacingClass = letterSpacingMatches[0];\n\tconst {letterSpacing} = tailwindStyles[letterSpacingClass];\n\tconst fontSizeClass = fontSizeMatches[0];\n\tconst {fontSize} = tailwindStyles[fontSizeClass];\n\n\tstyle.letterSpacing = Number.parseFloat(letterSpacing) * fontSize;\n};\n\nconst create = tailwindStyles => {\n\t// Pass a list of class names separated by a space, for example:\n\t// \"bg-green-100 text-green-800 font-semibold\")\n\t// and receive a styles object for use in React Native views\n\tconst tailwind = classNames => {\n\t\tconst style = {};\n\n\t\tif (!classNames) {\n\t\t\treturn style;\n\t\t}\n\n\t\taddFontVariant(style, classNames);\n\t\taddLetterSpacing(tailwindStyles, style, classNames);\n\n\t\tconst separateClassNames = classNames\n\t\t\t.replace(/\\s+/g, ' ')\n\t\t\t.trim()\n\t\t\t.split(' ')\n\t\t\t.filter(className => !className.startsWith('tracking-'));\n\n\t\tfor (const className of separateClassNames) {\n\t\t\tif (tailwindStyles[className]) {\n\t\t\t\tObject.assign(style, tailwindStyles[className]);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`Unsupported Tailwind class: \"${className}\"`);\n\t\t\t}\n\t\t}\n\n\t\treturn useVariables(style);\n\t};\n\n\t// Pass the name of a color (e.g. \"blue-500\") and receive a color value (e.g. \"#4399e1\"),\n\t// or a color and opacity (e.g. \"black opacity-50\") and get a color with opacity (e.g. \"rgba(0,0,0,0.5)\")\n\tconst getColor = name => {\n\t\tconst style = tailwind(name.split(' ').map(className => `bg-${className}`).join(' '));\n\t\treturn style.backgroundColor;\n\t};\n\n\treturn {tailwind, getColor};\n};\n\nconst {tailwind, getColor} = create(require('./styles.json'));\n\nmodule.exports = tailwind;\nmodule.exports.default = tailwind;\nmodule.exports.getColor = getColor;\nmodule.exports.create = create;\n"]},"metadata":{},"sourceType":"script"}