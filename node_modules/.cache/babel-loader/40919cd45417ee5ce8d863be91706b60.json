{"ast":null,"code":"\"use strict\";\n/**\n * matchAll\n * Get all the matches for a regular expression in a string.\n *\n * @name matchAll\n * @function\n * @param {String} s The input string.\n * @param {RegExp} r The regular expression.\n * @return {Object} An object containing the following fields:\n *\n *  - `input` (String): The input string.\n *  - `regex` (RegExp): The regular expression.\n *  - `next` (Function): Get the next match.\n *  - `toArray` (Function): Get all the matches.\n *  - `reset` (Function): Reset the index.\n */\n\nmodule.exports = function matchAll(s, r) {\n  return {\n    input: s,\n    regex: r\n    /**\n     * next\n     * Get the next match in single group match.\n     *\n     * @name next\n     * @function\n     * @return {String|null} The matched snippet.\n     */\n    ,\n    next: function next() {\n      var c = this.nextRaw();\n\n      if (c) {\n        for (var i = 1; i < c.length; i++) {\n          if (c[i]) {\n            return c[i];\n          }\n        }\n      }\n\n      return null;\n    }\n    /**\n     * nextRaw\n     * Get the next match in raw regex output. Usefull to get another group match.\n     *\n     * @name nextRaw\n     * @function\n     * @returns {Array|null} The matched snippet\n     */\n    ,\n    nextRaw: function nextRaw() {\n      var c = this.regex.exec(this.input);\n      return c;\n    }\n    /**\n     * toArray\n     * Get all the matches.\n     *\n     * @name toArray\n     * @function\n     * @return {Array} The matched snippets.\n     */\n    ,\n    toArray: function toArray() {\n      var res = [],\n          c = null;\n\n      while (c = this.next()) {\n        res.push(c);\n      }\n\n      return res;\n    }\n    /**\n     * reset\n     * Reset the index.\n     *\n     * @name reset\n     * @function\n     * @param {Number} i The new index (default: `0`).\n     * @return {Number} The new index.\n     */\n    ,\n    reset: function reset(i) {\n      return this.regex.lastIndex = i || 0;\n    }\n  };\n};","map":{"version":3,"sources":["/home/jihed/Bureau/my-app1/node_modules/match-all/lib/index.js"],"names":["module","exports","matchAll","s","r","input","regex","next","c","nextRaw","i","length","exec","toArray","res","push","reset","lastIndex"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,CAAlB,EAAqBC,CAArB,EAAwB;AACrC,SAAO;AACHC,IAAAA,KAAK,EAAEF,CADJ;AAEHG,IAAAA,KAAK,EAAEF;AAEP;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AAXW;AAYDG,IAAAA,IAAI,EAAE,SAASA,IAAT,GAAgB;AACpB,UAAIC,CAAC,GAAG,KAAKC,OAAL,EAAR;;AACA,UAAID,CAAJ,EAAO;AACH,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAAC,CAACG,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AAC/B,cAAIF,CAAC,CAACE,CAAD,CAAL,EAAU;AACN,mBAAOF,CAAC,CAACE,CAAD,CAAR;AACH;AACJ;AACJ;;AACD,aAAO,IAAP;AACH;AAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AA/BW;AAiCHD,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AACxB,UAAID,CAAC,GAAG,KAAKF,KAAL,CAAWM,IAAX,CAAgB,KAAKP,KAArB,CAAR;AACA,aAAOG,CAAP;AACH;AAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AA7CW;AA+CHK,IAAAA,OAAO,EAAE,SAASA,OAAT,GAAmB;AACxB,UAAIC,GAAG,GAAG,EAAV;AAAA,UACIN,CAAC,GAAG,IADR;;AAGA,aAAOA,CAAC,GAAG,KAAKD,IAAL,EAAX,EAAwB;AACpBO,QAAAA,GAAG,CAACC,IAAJ,CAASP,CAAT;AACH;;AAED,aAAOM,GAAP;AACH;AAED;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlEW;AAoEHE,IAAAA,KAAK,EAAE,SAASA,KAAT,CAAeN,CAAf,EAAkB;AACrB,aAAO,KAAKJ,KAAL,CAAWW,SAAX,GAAuBP,CAAC,IAAI,CAAnC;AACH;AAtEE,GAAP;AAwEH,CAzED","sourcesContent":["\"use strict\";\n\n/**\n * matchAll\n * Get all the matches for a regular expression in a string.\n *\n * @name matchAll\n * @function\n * @param {String} s The input string.\n * @param {RegExp} r The regular expression.\n * @return {Object} An object containing the following fields:\n *\n *  - `input` (String): The input string.\n *  - `regex` (RegExp): The regular expression.\n *  - `next` (Function): Get the next match.\n *  - `toArray` (Function): Get all the matches.\n *  - `reset` (Function): Reset the index.\n */\nmodule.exports = function matchAll(s, r) {\n    return {\n        input: s,\n        regex: r\n\n        /**\n         * next\n         * Get the next match in single group match.\n         *\n         * @name next\n         * @function\n         * @return {String|null} The matched snippet.\n         */\n        , next: function next() {\n            var c = this.nextRaw();\n            if (c) {\n                for (var i = 1; i < c.length; i++) {\n                    if (c[i]) {\n                        return c[i];\n                    }\n                }\n            }\n            return null;\n        }\n\n        /**\n         * nextRaw\n         * Get the next match in raw regex output. Usefull to get another group match.\n         *\n         * @name nextRaw\n         * @function\n         * @returns {Array|null} The matched snippet\n         */\n        ,\n        nextRaw: function nextRaw() {\n            var c = this.regex.exec(this.input);\n            return c;\n        }\n\n        /**\n         * toArray\n         * Get all the matches.\n         *\n         * @name toArray\n         * @function\n         * @return {Array} The matched snippets.\n         */\n        ,\n        toArray: function toArray() {\n            var res = [],\n                c = null;\n\n            while (c = this.next()) {\n                res.push(c);\n            }\n\n            return res;\n        }\n\n        /**\n         * reset\n         * Reset the index.\n         *\n         * @name reset\n         * @function\n         * @param {Number} i The new index (default: `0`).\n         * @return {Number} The new index.\n         */\n        ,\n        reset: function reset(i) {\n            return this.regex.lastIndex = i || 0;\n        }\n    };\n};"]},"metadata":{},"sourceType":"script"}